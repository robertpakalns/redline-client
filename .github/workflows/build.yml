on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            node_abi: win32-x64-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
            node_abi: win32-ia32-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            node_abi: linux-x64-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            node_abi: linux-arm64-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            node_abi: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            node_abi: darwin-arm64

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - id: get_version
        shell: bash
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - shell: bash
        run: |
          tag="v${{ steps.get_version.outputs.version }}"
          if git show-ref --tags --verify --quiet "refs/tags/${tag}"; then
            echo "Tag ${tag} already exists."
            exit 1
          fi

      - run: npm ci

      - uses: dtolnay/rust-toolchain@stable
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          profile: minimal
          toolchain: stable
          override: true

      - working-directory: ./src-rust
        run: |
          cd analytics && npx napi build --target ${{ matrix.node_abi }} --release
          cd ../drpc && npx napi build --target ${{ matrix.node_abi }} --release

      - uses: softprops/action-gh-release@v2.0.6
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}